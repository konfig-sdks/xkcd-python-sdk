# coding: utf-8

"""
    XKCD

    Webcomic of romance, sarcasm, math, and language.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xkcd_python_sdk import schemas  # noqa: F401


class Comic(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            alt = schemas.StrSchema
            day = schemas.StrSchema
            img = schemas.StrSchema
            link = schemas.StrSchema
            month = schemas.StrSchema
            news = schemas.StrSchema
            num = schemas.NumberSchema
            safe_title = schemas.StrSchema
            transcript = schemas.StrSchema
            year = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "alt": alt,
                "day": day,
                "img": img,
                "link": link,
                "month": month,
                "news": news,
                "num": num,
                "safe_title": safe_title,
                "transcript": transcript,
                "year": year,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alt"]) -> MetaOapg.properties.alt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day"]) -> MetaOapg.properties.day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["img"]) -> MetaOapg.properties.img: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["news"]) -> MetaOapg.properties.news: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num"]) -> MetaOapg.properties.num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safe_title"]) -> MetaOapg.properties.safe_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcript"]) -> MetaOapg.properties.transcript: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "alt", "day", "img", "link", "month", "news", "num", "safe_title", "transcript", "year", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alt"]) -> typing.Union[MetaOapg.properties.alt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day"]) -> typing.Union[MetaOapg.properties.day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["img"]) -> typing.Union[MetaOapg.properties.img, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> typing.Union[MetaOapg.properties.month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["news"]) -> typing.Union[MetaOapg.properties.news, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num"]) -> typing.Union[MetaOapg.properties.num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safe_title"]) -> typing.Union[MetaOapg.properties.safe_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcript"]) -> typing.Union[MetaOapg.properties.transcript, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union[MetaOapg.properties.year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "alt", "day", "img", "link", "month", "news", "num", "safe_title", "transcript", "year", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        alt: typing.Union[MetaOapg.properties.alt, str, schemas.Unset] = schemas.unset,
        day: typing.Union[MetaOapg.properties.day, str, schemas.Unset] = schemas.unset,
        img: typing.Union[MetaOapg.properties.img, str, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        month: typing.Union[MetaOapg.properties.month, str, schemas.Unset] = schemas.unset,
        news: typing.Union[MetaOapg.properties.news, str, schemas.Unset] = schemas.unset,
        num: typing.Union[MetaOapg.properties.num, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        safe_title: typing.Union[MetaOapg.properties.safe_title, str, schemas.Unset] = schemas.unset,
        transcript: typing.Union[MetaOapg.properties.transcript, str, schemas.Unset] = schemas.unset,
        year: typing.Union[MetaOapg.properties.year, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Comic':
        return super().__new__(
            cls,
            *args,
            title=title,
            alt=alt,
            day=day,
            img=img,
            link=link,
            month=month,
            news=news,
            num=num,
            safe_title=safe_title,
            transcript=transcript,
            year=year,
            _configuration=_configuration,
            **kwargs,
        )
